// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: semantic_search.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/pgvector/pgvector-go"
)

const SearchGameContexts = `-- name: SearchGameContexts :many
SELECT gc.id, gc.game_id, gc.content, gc.embedding, gc.created_at, gc.updated_at, (gc.embedding <=> $1) as distance
FROM game_contexts gc
WHERE gc.game_id = $2 AND gc.embedding IS NOT NULL
ORDER BY gc.embedding <=> $1
LIMIT $3
`

type SearchGameContextsParams struct {
	Embedding pgvector.Vector `json:"embedding"`
	GameID    uuid.UUID       `json:"game_id"`
	Limit     int32           `json:"limit"`
}

type SearchGameContextsRow struct {
	ID        uuid.UUID          `json:"id"`
	GameID    uuid.UUID          `json:"game_id"`
	Content   string             `json:"content"`
	Embedding pgvector.Vector    `json:"embedding"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	Distance  interface{}        `json:"distance"`
}

// This query uses vector embeddings for semantic search
// It finds contexts related to the query based on vector similarity
// For text queries, we would first generate an embedding from the query text
func (q *Queries) SearchGameContexts(ctx context.Context, arg SearchGameContextsParams) ([]SearchGameContextsRow, error) {
	rows, err := q.db.Query(ctx, SearchGameContexts, arg.Embedding, arg.GameID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchGameContextsRow{}
	for rows.Next() {
		var i SearchGameContextsRow
		if err := rows.Scan(
			&i.ID,
			&i.GameID,
			&i.Content,
			&i.Embedding,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Distance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
