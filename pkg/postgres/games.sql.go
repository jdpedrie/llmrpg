// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: games.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const CreateGame = `-- name: CreateGame :one
INSERT INTO games (
  name, description, starting_message, scenario, objectives,
  skills, characteristics, relationship,
  is_template, is_running
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
)
RETURNING id, name, description, starting_message, scenario, objectives, skills, characteristics, relationship, is_template, is_running, playthrough_start_time, playthrough_end_time, last_activity_time, created_at, updated_at
`

type CreateGameParams struct {
	Name            string      `json:"name"`
	Description     pgtype.Text `json:"description"`
	StartingMessage pgtype.Text `json:"starting_message"`
	Scenario        pgtype.Text `json:"scenario"`
	Objectives      pgtype.Text `json:"objectives"`
	Skills          []string    `json:"skills"`
	Characteristics []string    `json:"characteristics"`
	Relationship    []string    `json:"relationship"`
	IsTemplate      bool        `json:"is_template"`
	IsRunning       bool        `json:"is_running"`
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (Game, error) {
	row := q.db.QueryRow(ctx, CreateGame,
		arg.Name,
		arg.Description,
		arg.StartingMessage,
		arg.Scenario,
		arg.Objectives,
		arg.Skills,
		arg.Characteristics,
		arg.Relationship,
		arg.IsTemplate,
		arg.IsRunning,
	)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StartingMessage,
		&i.Scenario,
		&i.Objectives,
		&i.Skills,
		&i.Characteristics,
		&i.Relationship,
		&i.IsTemplate,
		&i.IsRunning,
		&i.PlaythroughStartTime,
		&i.PlaythroughEndTime,
		&i.LastActivityTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteGame = `-- name: DeleteGame :exec
DELETE FROM games
WHERE id = $1
`

func (q *Queries) DeleteGame(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeleteGame, id)
	return err
}

const EndGame = `-- name: EndGame :one
UPDATE games
SET 
  is_running = false,
  playthrough_end_time = NOW(),
  last_activity_time = NOW()
WHERE id = $1
RETURNING id, name, description, starting_message, scenario, objectives, skills, characteristics, relationship, is_template, is_running, playthrough_start_time, playthrough_end_time, last_activity_time, created_at, updated_at
`

func (q *Queries) EndGame(ctx context.Context, id uuid.UUID) (Game, error) {
	row := q.db.QueryRow(ctx, EndGame, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StartingMessage,
		&i.Scenario,
		&i.Objectives,
		&i.Skills,
		&i.Characteristics,
		&i.Relationship,
		&i.IsTemplate,
		&i.IsRunning,
		&i.PlaythroughStartTime,
		&i.PlaythroughEndTime,
		&i.LastActivityTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetGame = `-- name: GetGame :one
SELECT id, name, description, starting_message, scenario, objectives, skills, characteristics, relationship, is_template, is_running, playthrough_start_time, playthrough_end_time, last_activity_time, created_at, updated_at FROM games
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGame(ctx context.Context, id uuid.UUID) (Game, error) {
	row := q.db.QueryRow(ctx, GetGame, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StartingMessage,
		&i.Scenario,
		&i.Objectives,
		&i.Skills,
		&i.Characteristics,
		&i.Relationship,
		&i.IsTemplate,
		&i.IsRunning,
		&i.PlaythroughStartTime,
		&i.PlaythroughEndTime,
		&i.LastActivityTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListGameTemplates = `-- name: ListGameTemplates :many
SELECT id, name, description, starting_message, scenario, objectives, skills, characteristics, relationship, is_template, is_running, playthrough_start_time, playthrough_end_time, last_activity_time, created_at, updated_at FROM games
WHERE is_template = true
ORDER BY name ASC
`

func (q *Queries) ListGameTemplates(ctx context.Context) ([]Game, error) {
	rows, err := q.db.Query(ctx, ListGameTemplates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Game{}
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.StartingMessage,
			&i.Scenario,
			&i.Objectives,
			&i.Skills,
			&i.Characteristics,
			&i.Relationship,
			&i.IsTemplate,
			&i.IsRunning,
			&i.PlaythroughStartTime,
			&i.PlaythroughEndTime,
			&i.LastActivityTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListGames = `-- name: ListGames :many
SELECT id, name, description, starting_message, scenario, objectives, skills, characteristics, relationship, is_template, is_running, playthrough_start_time, playthrough_end_time, last_activity_time, created_at, updated_at FROM games
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListGamesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListGames(ctx context.Context, arg ListGamesParams) ([]Game, error) {
	rows, err := q.db.Query(ctx, ListGames, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Game{}
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.StartingMessage,
			&i.Scenario,
			&i.Objectives,
			&i.Skills,
			&i.Characteristics,
			&i.Relationship,
			&i.IsTemplate,
			&i.IsRunning,
			&i.PlaythroughStartTime,
			&i.PlaythroughEndTime,
			&i.LastActivityTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const StartGame = `-- name: StartGame :one
UPDATE games
SET 
  is_running = true,
  is_template = false,
  playthrough_start_time = NOW(),
  last_activity_time = NOW()
WHERE id = $1
RETURNING id, name, description, starting_message, scenario, objectives, skills, characteristics, relationship, is_template, is_running, playthrough_start_time, playthrough_end_time, last_activity_time, created_at, updated_at
`

func (q *Queries) StartGame(ctx context.Context, id uuid.UUID) (Game, error) {
	row := q.db.QueryRow(ctx, StartGame, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StartingMessage,
		&i.Scenario,
		&i.Objectives,
		&i.Skills,
		&i.Characteristics,
		&i.Relationship,
		&i.IsTemplate,
		&i.IsRunning,
		&i.PlaythroughStartTime,
		&i.PlaythroughEndTime,
		&i.LastActivityTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateGame = `-- name: UpdateGame :one
UPDATE games
SET 
  name = $2,
  description = $3,
  starting_message = $4,
  scenario = $5,
  objectives = $6,
  skills = $7,
  characteristics = $8,
  relationship = $9,
  is_template = $10,
  is_running = $11,
  last_activity_time = NOW()
WHERE id = $1
RETURNING id, name, description, starting_message, scenario, objectives, skills, characteristics, relationship, is_template, is_running, playthrough_start_time, playthrough_end_time, last_activity_time, created_at, updated_at
`

type UpdateGameParams struct {
	ID              uuid.UUID   `json:"id"`
	Name            string      `json:"name"`
	Description     pgtype.Text `json:"description"`
	StartingMessage pgtype.Text `json:"starting_message"`
	Scenario        pgtype.Text `json:"scenario"`
	Objectives      pgtype.Text `json:"objectives"`
	Skills          []string    `json:"skills"`
	Characteristics []string    `json:"characteristics"`
	Relationship    []string    `json:"relationship"`
	IsTemplate      bool        `json:"is_template"`
	IsRunning       bool        `json:"is_running"`
}

func (q *Queries) UpdateGame(ctx context.Context, arg UpdateGameParams) (Game, error) {
	row := q.db.QueryRow(ctx, UpdateGame,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.StartingMessage,
		arg.Scenario,
		arg.Objectives,
		arg.Skills,
		arg.Characteristics,
		arg.Relationship,
		arg.IsTemplate,
		arg.IsRunning,
	)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StartingMessage,
		&i.Scenario,
		&i.Objectives,
		&i.Skills,
		&i.Characteristics,
		&i.Relationship,
		&i.IsTemplate,
		&i.IsRunning,
		&i.PlaythroughStartTime,
		&i.PlaythroughEndTime,
		&i.LastActivityTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
