// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: inventory.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const CreateInventoryItem = `-- name: CreateInventoryItem :one
INSERT INTO inventory_items (
  name, description, active, game_id
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, name, description, active, game_id, created_at, updated_at
`

type CreateInventoryItemParams struct {
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Active      bool      `json:"active"`
	GameID      uuid.UUID `json:"game_id"`
}

func (q *Queries) CreateInventoryItem(ctx context.Context, arg CreateInventoryItemParams) (InventoryItem, error) {
	row := q.db.QueryRow(ctx, CreateInventoryItem,
		arg.Name,
		arg.Description,
		arg.Active,
		arg.GameID,
	)
	var i InventoryItem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Active,
		&i.GameID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteInventoryItem = `-- name: DeleteInventoryItem :exec
DELETE FROM inventory_items
WHERE id = $1
`

func (q *Queries) DeleteInventoryItem(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeleteInventoryItem, id)
	return err
}

const GetInventoryItem = `-- name: GetInventoryItem :one
SELECT id, name, description, active, game_id, created_at, updated_at FROM inventory_items
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetInventoryItem(ctx context.Context, id uuid.UUID) (InventoryItem, error) {
	row := q.db.QueryRow(ctx, GetInventoryItem, id)
	var i InventoryItem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Active,
		&i.GameID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListGameInventory = `-- name: ListGameInventory :many
SELECT id, name, description, active, game_id, created_at, updated_at FROM inventory_items
WHERE game_id = $1
ORDER BY name ASC
`

func (q *Queries) ListGameInventory(ctx context.Context, gameID uuid.UUID) ([]InventoryItem, error) {
	rows, err := q.db.Query(ctx, ListGameInventory, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InventoryItem{}
	for rows.Next() {
		var i InventoryItem
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Active,
			&i.GameID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateInventoryItem = `-- name: UpdateInventoryItem :one
UPDATE inventory_items
SET 
  name = $2,
  description = $3,
  active = $4
WHERE id = $1
RETURNING id, name, description, active, game_id, created_at, updated_at
`

type UpdateInventoryItemParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Active      bool      `json:"active"`
}

func (q *Queries) UpdateInventoryItem(ctx context.Context, arg UpdateInventoryItemParams) (InventoryItem, error) {
	row := q.db.QueryRow(ctx, UpdateInventoryItem,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Active,
	)
	var i InventoryItem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Active,
		&i.GameID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
