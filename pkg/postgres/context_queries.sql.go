// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: context_queries.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const CreateContextQuery = `-- name: CreateContextQuery :one
INSERT INTO context_queries (
  game_id, query, used
) VALUES (
  $1, $2, $3
)
RETURNING id, game_id, query, used, created_at
`

type CreateContextQueryParams struct {
	GameID uuid.UUID `json:"game_id"`
	Query  string    `json:"query"`
	Used   bool      `json:"used"`
}

func (q *Queries) CreateContextQuery(ctx context.Context, arg CreateContextQueryParams) (ContextQuery, error) {
	row := q.db.QueryRow(ctx, CreateContextQuery, arg.GameID, arg.Query, arg.Used)
	var i ContextQuery
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.Query,
		&i.Used,
		&i.CreatedAt,
	)
	return i, err
}

const DeleteContextQueries = `-- name: DeleteContextQueries :exec
DELETE FROM context_queries
WHERE game_id = $1
`

func (q *Queries) DeleteContextQueries(ctx context.Context, gameID uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeleteContextQueries, gameID)
	return err
}

const GetContextQueriesForGame = `-- name: GetContextQueriesForGame :many
SELECT id, game_id, query, used, created_at FROM context_queries
WHERE game_id = $1 AND used = false
`

func (q *Queries) GetContextQueriesForGame(ctx context.Context, gameID uuid.UUID) ([]ContextQuery, error) {
	rows, err := q.db.Query(ctx, GetContextQueriesForGame, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ContextQuery{}
	for rows.Next() {
		var i ContextQuery
		if err := rows.Scan(
			&i.ID,
			&i.GameID,
			&i.Query,
			&i.Used,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const MarkContextQueriesAsUsed = `-- name: MarkContextQueriesAsUsed :exec
UPDATE context_queries
SET used = true
WHERE game_id = $1 AND used = false
`

func (q *Queries) MarkContextQueriesAsUsed(ctx context.Context, gameID uuid.UUID) error {
	_, err := q.db.Exec(ctx, MarkContextQueriesAsUsed, gameID)
	return err
}
