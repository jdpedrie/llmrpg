// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: character_updates.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const UpdateCharacterActive = `-- name: UpdateCharacterActive :one
UPDATE characters
SET active = $2
WHERE id = $1
RETURNING id, name, description, context, active, main_character, game_id, created_at, updated_at
`

type UpdateCharacterActiveParams struct {
	ID     uuid.UUID `json:"id"`
	Active bool      `json:"active"`
}

func (q *Queries) UpdateCharacterActive(ctx context.Context, arg UpdateCharacterActiveParams) (Character, error) {
	row := q.db.QueryRow(ctx, UpdateCharacterActive, arg.ID, arg.Active)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Context,
		&i.Active,
		&i.MainCharacter,
		&i.GameID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateCharacterContext = `-- name: UpdateCharacterContext :one
UPDATE characters
SET context = $2
WHERE id = $1
RETURNING id, name, description, context, active, main_character, game_id, created_at, updated_at
`

type UpdateCharacterContextParams struct {
	ID      uuid.UUID `json:"id"`
	Context []string  `json:"context"`
}

func (q *Queries) UpdateCharacterContext(ctx context.Context, arg UpdateCharacterContextParams) (Character, error) {
	row := q.db.QueryRow(ctx, UpdateCharacterContext, arg.ID, arg.Context)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Context,
		&i.Active,
		&i.MainCharacter,
		&i.GameID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateCharacterDescription = `-- name: UpdateCharacterDescription :one
UPDATE characters
SET description = $2
WHERE id = $1
RETURNING id, name, description, context, active, main_character, game_id, created_at, updated_at
`

type UpdateCharacterDescriptionParams struct {
	ID          uuid.UUID   `json:"id"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateCharacterDescription(ctx context.Context, arg UpdateCharacterDescriptionParams) (Character, error) {
	row := q.db.QueryRow(ctx, UpdateCharacterDescription, arg.ID, arg.Description)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Context,
		&i.Active,
		&i.MainCharacter,
		&i.GameID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateCharacterName = `-- name: UpdateCharacterName :one
UPDATE characters
SET name = $2
WHERE id = $1
RETURNING id, name, description, context, active, main_character, game_id, created_at, updated_at
`

type UpdateCharacterNameParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpdateCharacterName(ctx context.Context, arg UpdateCharacterNameParams) (Character, error) {
	row := q.db.QueryRow(ctx, UpdateCharacterName, arg.ID, arg.Name)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Context,
		&i.Active,
		&i.MainCharacter,
		&i.GameID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
