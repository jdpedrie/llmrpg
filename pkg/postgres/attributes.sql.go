// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: attributes.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const CreateCharacterAttribute = `-- name: CreateCharacterAttribute :one
INSERT INTO character_attributes (
  name, value, attribute_type
) VALUES (
  $1, $2, $3
)
RETURNING id, name, value, attribute_type, created_at, updated_at
`

type CreateCharacterAttributeParams struct {
	Name          string `json:"name"`
	Value         int16  `json:"value"`
	AttributeType string `json:"attribute_type"`
}

func (q *Queries) CreateCharacterAttribute(ctx context.Context, arg CreateCharacterAttributeParams) (CharacterAttribute, error) {
	row := q.db.QueryRow(ctx, CreateCharacterAttribute, arg.Name, arg.Value, arg.AttributeType)
	var i CharacterAttribute
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Value,
		&i.AttributeType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteCharacterAttribute = `-- name: DeleteCharacterAttribute :exec
DELETE FROM character_attributes
WHERE id = $1
`

func (q *Queries) DeleteCharacterAttribute(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeleteCharacterAttribute, id)
	return err
}

const GetCharacterAttribute = `-- name: GetCharacterAttribute :one
SELECT id, name, value, attribute_type, created_at, updated_at FROM character_attributes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCharacterAttribute(ctx context.Context, id uuid.UUID) (CharacterAttribute, error) {
	row := q.db.QueryRow(ctx, GetCharacterAttribute, id)
	var i CharacterAttribute
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Value,
		&i.AttributeType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const LinkCharacterAttribute = `-- name: LinkCharacterAttribute :exec
INSERT INTO character_to_attributes (
  character_id, attribute_id, relationship_type
) VALUES (
  $1, $2, $3
)
`

type LinkCharacterAttributeParams struct {
	CharacterID      uuid.UUID `json:"character_id"`
	AttributeID      uuid.UUID `json:"attribute_id"`
	RelationshipType string    `json:"relationship_type"`
}

func (q *Queries) LinkCharacterAttribute(ctx context.Context, arg LinkCharacterAttributeParams) error {
	_, err := q.db.Exec(ctx, LinkCharacterAttribute, arg.CharacterID, arg.AttributeID, arg.RelationshipType)
	return err
}

const ListCharacterAttributesByType = `-- name: ListCharacterAttributesByType :many
SELECT ca.id, ca.name, ca.value, ca.attribute_type, ca.created_at, ca.updated_at FROM character_attributes ca
JOIN character_to_attributes cta ON ca.id = cta.attribute_id
WHERE cta.character_id = $1 AND cta.relationship_type = $2
ORDER BY ca.name ASC
`

type ListCharacterAttributesByTypeParams struct {
	CharacterID      uuid.UUID `json:"character_id"`
	RelationshipType string    `json:"relationship_type"`
}

func (q *Queries) ListCharacterAttributesByType(ctx context.Context, arg ListCharacterAttributesByTypeParams) ([]CharacterAttribute, error) {
	rows, err := q.db.Query(ctx, ListCharacterAttributesByType, arg.CharacterID, arg.RelationshipType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CharacterAttribute{}
	for rows.Next() {
		var i CharacterAttribute
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Value,
			&i.AttributeType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UnlinkCharacterAttribute = `-- name: UnlinkCharacterAttribute :exec
DELETE FROM character_to_attributes
WHERE character_id = $1 AND attribute_id = $2
`

type UnlinkCharacterAttributeParams struct {
	CharacterID uuid.UUID `json:"character_id"`
	AttributeID uuid.UUID `json:"attribute_id"`
}

func (q *Queries) UnlinkCharacterAttribute(ctx context.Context, arg UnlinkCharacterAttributeParams) error {
	_, err := q.db.Exec(ctx, UnlinkCharacterAttribute, arg.CharacterID, arg.AttributeID)
	return err
}

const UpdateCharacterAttribute = `-- name: UpdateCharacterAttribute :one
UPDATE character_attributes
SET 
  name = $2,
  value = $3,
  attribute_type = $4
WHERE id = $1
RETURNING id, name, value, attribute_type, created_at, updated_at
`

type UpdateCharacterAttributeParams struct {
	ID            uuid.UUID `json:"id"`
	Name          string    `json:"name"`
	Value         int16     `json:"value"`
	AttributeType string    `json:"attribute_type"`
}

func (q *Queries) UpdateCharacterAttribute(ctx context.Context, arg UpdateCharacterAttributeParams) (CharacterAttribute, error) {
	row := q.db.QueryRow(ctx, UpdateCharacterAttribute,
		arg.ID,
		arg.Name,
		arg.Value,
		arg.AttributeType,
	)
	var i CharacterAttribute
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Value,
		&i.AttributeType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
