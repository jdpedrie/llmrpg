// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: history_extensions.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const CreateHistory = `-- name: CreateHistory :one
INSERT INTO history (
  game_id, text, choice, outcome
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, game_id, text, choice, outcome, embedding, created_at
`

type CreateHistoryParams struct {
	GameID  uuid.UUID `json:"game_id"`
	Text    string    `json:"text"`
	Choice  string    `json:"choice"`
	Outcome string    `json:"outcome"`
}

func (q *Queries) CreateHistory(ctx context.Context, arg CreateHistoryParams) (History, error) {
	row := q.db.QueryRow(ctx, CreateHistory,
		arg.GameID,
		arg.Text,
		arg.Choice,
		arg.Outcome,
	)
	var i History
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.Text,
		&i.Choice,
		&i.Outcome,
		&i.Embedding,
		&i.CreatedAt,
	)
	return i, err
}

const GetGameHistory = `-- name: GetGameHistory :many
SELECT id, game_id, text, choice, outcome, embedding, created_at FROM history
WHERE game_id = $1
ORDER BY created_at DESC
LIMIT $2
`

type GetGameHistoryParams struct {
	GameID uuid.UUID `json:"game_id"`
	Limit  int32     `json:"limit"`
}

func (q *Queries) GetGameHistory(ctx context.Context, arg GetGameHistoryParams) ([]History, error) {
	rows, err := q.db.Query(ctx, GetGameHistory, arg.GameID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []History{}
	for rows.Next() {
		var i History
		if err := rows.Scan(
			&i.ID,
			&i.GameID,
			&i.Text,
			&i.Choice,
			&i.Outcome,
			&i.Embedding,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
