// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: history.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/pgvector/pgvector-go"
)

const CreateHistoryEntry = `-- name: CreateHistoryEntry :one
INSERT INTO history (
  game_id, text, choice, outcome
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, game_id, text, choice, outcome, embedding, created_at
`

type CreateHistoryEntryParams struct {
	GameID  uuid.UUID `json:"game_id"`
	Text    string    `json:"text"`
	Choice  string    `json:"choice"`
	Outcome string    `json:"outcome"`
}

func (q *Queries) CreateHistoryEntry(ctx context.Context, arg CreateHistoryEntryParams) (History, error) {
	row := q.db.QueryRow(ctx, CreateHistoryEntry,
		arg.GameID,
		arg.Text,
		arg.Choice,
		arg.Outcome,
	)
	var i History
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.Text,
		&i.Choice,
		&i.Outcome,
		&i.Embedding,
		&i.CreatedAt,
	)
	return i, err
}

const GetHistoryEntry = `-- name: GetHistoryEntry :one
SELECT id, game_id, text, choice, outcome, embedding, created_at FROM history
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetHistoryEntry(ctx context.Context, id uuid.UUID) (History, error) {
	row := q.db.QueryRow(ctx, GetHistoryEntry, id)
	var i History
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.Text,
		&i.Choice,
		&i.Outcome,
		&i.Embedding,
		&i.CreatedAt,
	)
	return i, err
}

const ListGameHistory = `-- name: ListGameHistory :many
SELECT id, game_id, text, choice, outcome, embedding, created_at FROM history
WHERE game_id = $1
ORDER BY created_at ASC
`

func (q *Queries) ListGameHistory(ctx context.Context, gameID uuid.UUID) ([]History, error) {
	rows, err := q.db.Query(ctx, ListGameHistory, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []History{}
	for rows.Next() {
		var i History
		if err := rows.Scan(
			&i.ID,
			&i.GameID,
			&i.Text,
			&i.Choice,
			&i.Outcome,
			&i.Embedding,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchSimilarHistory = `-- name: SearchSimilarHistory :many
SELECT h.id, h.game_id, h.text, h.choice, h.outcome, h.embedding, h.created_at, (h.embedding <=> $1) as distance
FROM history h
WHERE h.game_id = $2 AND h.embedding IS NOT NULL
ORDER BY h.embedding <=> $1
LIMIT $3
`

type SearchSimilarHistoryParams struct {
	Embedding pgvector.Vector `json:"embedding"`
	GameID    uuid.UUID       `json:"game_id"`
	Limit     int32           `json:"limit"`
}

type SearchSimilarHistoryRow struct {
	ID        uuid.UUID          `json:"id"`
	GameID    uuid.UUID          `json:"game_id"`
	Text      string             `json:"text"`
	Choice    string             `json:"choice"`
	Outcome   string             `json:"outcome"`
	Embedding pgvector.Vector    `json:"embedding"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	Distance  interface{}        `json:"distance"`
}

func (q *Queries) SearchSimilarHistory(ctx context.Context, arg SearchSimilarHistoryParams) ([]SearchSimilarHistoryRow, error) {
	rows, err := q.db.Query(ctx, SearchSimilarHistory, arg.Embedding, arg.GameID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchSimilarHistoryRow{}
	for rows.Next() {
		var i SearchSimilarHistoryRow
		if err := rows.Scan(
			&i.ID,
			&i.GameID,
			&i.Text,
			&i.Choice,
			&i.Outcome,
			&i.Embedding,
			&i.CreatedAt,
			&i.Distance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateHistoryEmbedding = `-- name: UpdateHistoryEmbedding :exec
UPDATE history
SET embedding = $2
WHERE id = $1
`

type UpdateHistoryEmbeddingParams struct {
	ID        uuid.UUID       `json:"id"`
	Embedding pgvector.Vector `json:"embedding"`
}

func (q *Queries) UpdateHistoryEmbedding(ctx context.Context, arg UpdateHistoryEmbeddingParams) error {
	_, err := q.db.Exec(ctx, UpdateHistoryEmbedding, arg.ID, arg.Embedding)
	return err
}
