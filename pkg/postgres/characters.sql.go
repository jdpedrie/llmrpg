// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: characters.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const CreateCharacter = `-- name: CreateCharacter :one
INSERT INTO characters (
  name, description, context, active, main_character, game_id
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, name, description, context, active, main_character, game_id, created_at, updated_at
`

type CreateCharacterParams struct {
	Name          string      `json:"name"`
	Description   pgtype.Text `json:"description"`
	Context       []string    `json:"context"`
	Active        bool        `json:"active"`
	MainCharacter bool        `json:"main_character"`
	GameID        pgtype.UUID `json:"game_id"`
}

func (q *Queries) CreateCharacter(ctx context.Context, arg CreateCharacterParams) (Character, error) {
	row := q.db.QueryRow(ctx, CreateCharacter,
		arg.Name,
		arg.Description,
		arg.Context,
		arg.Active,
		arg.MainCharacter,
		arg.GameID,
	)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Context,
		&i.Active,
		&i.MainCharacter,
		&i.GameID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteCharacter = `-- name: DeleteCharacter :exec
DELETE FROM characters
WHERE id = $1
`

func (q *Queries) DeleteCharacter(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeleteCharacter, id)
	return err
}

const GetCharacter = `-- name: GetCharacter :one
SELECT id, name, description, context, active, main_character, game_id, created_at, updated_at FROM characters
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCharacter(ctx context.Context, id uuid.UUID) (Character, error) {
	row := q.db.QueryRow(ctx, GetCharacter, id)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Context,
		&i.Active,
		&i.MainCharacter,
		&i.GameID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListCharacters = `-- name: ListCharacters :many
SELECT id, name, description, context, active, main_character, game_id, created_at, updated_at FROM characters
WHERE game_id = $1
ORDER BY name ASC
`

func (q *Queries) ListCharacters(ctx context.Context, gameID pgtype.UUID) ([]Character, error) {
	rows, err := q.db.Query(ctx, ListCharacters, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Character{}
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Context,
			&i.Active,
			&i.MainCharacter,
			&i.GameID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateCharacter = `-- name: UpdateCharacter :one
UPDATE characters
SET 
  name = $2,
  description = $3,
  context = $4,
  active = $5,
  main_character = $6
WHERE id = $1
RETURNING id, name, description, context, active, main_character, game_id, created_at, updated_at
`

type UpdateCharacterParams struct {
	ID            uuid.UUID   `json:"id"`
	Name          string      `json:"name"`
	Description   pgtype.Text `json:"description"`
	Context       []string    `json:"context"`
	Active        bool        `json:"active"`
	MainCharacter bool        `json:"main_character"`
}

func (q *Queries) UpdateCharacter(ctx context.Context, arg UpdateCharacterParams) (Character, error) {
	row := q.db.QueryRow(ctx, UpdateCharacter,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Context,
		arg.Active,
		arg.MainCharacter,
	)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Context,
		&i.Active,
		&i.MainCharacter,
		&i.GameID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
